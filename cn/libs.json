{"docs":{"run-mode":{"base-mode":[{"t":"h","c":"标准模式"},{"t":"p","c":"标准模式就是使用本地的静态服务器，打开准备好的 _preview.html 文件。如果你使用我们推荐的VSCode 编辑器，那么这个步骤非常简单："},{"t":"l","c":"1. 打开 LiveServer 扩展页面，点击安装，然后会自动打开VSCode并进行扩展安装。\n\n2. 将下载的项目解压缩，使用 VSCode 打开该文件夹。\n\n3. 在VSCode内，右键根目录下的 _preview.html 文件，选择 open with live server。等待页面初始化完成后，就能点击页面上的链接进行预览。"},{"t":"p","c":"_preview.html 文件就是预览项目的启动器。你也可以不使用 LiveServer，使用其他能够启动静态服务器的扩展。"},{"t":"p","c":"这种使用VSCode打开方式的成本最低，编辑器内可以快速启动静态服务器。当然，你也可以使用其他的 Markdown 编辑器，如 Typora，开发工具如 Eclipse，甚至是你系统自带的文本编辑器，只要你觉得方便即可。"},{"t":"p","c":"至于静态服务器，你可以使用本地搭建的服务器，如 Nginx、Apache 等，只要它能够用来访问静态 HTML 文件就可以。"},{"t":"h","c":"如何打包"},{"t":"p","c":"同上，在服务器模式下打开 _preview.html，点击 下载网站 就能得到打包好的静态文件；"},{"t":"p","c":"接下来，你可以直接进入基础文件章节查看更多信息。"}],"cli-mode":[{"t":"h","c":"命令行模式"},{"t":"p","c":"命令行模式是通过使用 obook 命令来启动你的项目，需要具备一定的开发知识基础。以下是使用流程："},{"t":"l","c":"1. 确保系统已经安装了 Node.js，并确保版本大于等于 18。\n\n2. 在命令行中使用 npm i obook -g 命令将 o-book 安装到你的本机。\n\n3. 下载下来的项目文件后，确保项目根目录下的 package.json 文件已经配置了 obook 属性，如下所示："},0,{"t":"l","c":"4. 在终端中切换到当前项目目录，使用 obook dev 命令进行实时预览，"},{"t":"h","c":"如何打包"},{"t":"p","c":"同上模式下，使用 obook build 命令将项目打包到 package.json 上定义的 dist 目录。"},{"t":"p","c":"接下来，你可以直接进入基础文件章节查看更多信息。"}],"webapp-mode":[{"t":"h","c":"网页应用模式"},{"t":"p","c":"这种方式是 obook 最低成本的使用方式，以下是使用步骤："},{"t":"l","c":"1. 使用最新版的 Chrome 浏览器（或支持 File Access API 的其他浏览器），打开 obook webapp\n\n2. 在网页上点击 \"选择本地文件夹\" 按钮，以打开你本地的项目文件夹；"},{"t":"p","c":"现在，你可以点击链接进行预览，"},{"t":"h","c":"如何打包"},{"t":"p","c":"步骤同上，页面上点击 \"下载网站\" 按钮来下载已经打包好的文档站。"},{"t":"p","c":"这种方式非常简便，适合不需要复杂设置和开发知识的用户。"}]},"base-files":[{"t":"h","c":"基础文件"},{"t":"p","c":"基础文件相当于 o-book 启动的脚手架，需要有这层基底才能进行项目的预览和打包。它们与你的 Markdown 网站间接相关，打包后的文件不会包含这些基础文件。如果你不是开发人员，或者不关心脚手架的细节，也可以跳过这章，直接查看项目文件。"},{"t":"p","c":"o-book 最主要的基础文件有两个，分别是 sw.js 和 _preview.html。"},{"t":"h","c":"sw.js"},{"t":"p","c":"sw.js 是基础文件之一，只有一行代码，内容是引用官方文件进行初始化，不需要过多关注："},0,{"t":"h","c":"_preview.html"},{"t":"p","c":"_preview.html 是项目启动预览初始化的文件，主要的代码如下："},0,{"t":"p","c":"其中，source 引用地址到项目配置文件处，项目文件将在下一章讨论。lang 属性用于设置文档站默认使用的语言。obook 默认支持多语言，如果不需要多语言支持，只保留一个 source 即可。"},{"t":"p","c":"目前 o-book 官方支持的语言包括："},{"t":"l","c":"- en 英语\n- cn 简体中文\n- t-cn 繁体中文\n- es 西班牙语"}],"project-docs":[{"t":"h","c":"项目文件"},{"t":"p","c":"项目文件是你真正写文档的文件，项目目录结构大致如下："},{"t":"l","c":"- config.json\n- docs\n  - SUMMARY.md\n  - article1.md\n  - article2.md"},{"t":"p","c":"在这个结构中，.md 文件是你实际编写文档内容的文件，你只需要按照 Markdown 的格式编写文档即可。"},{"t":"h","c":"config.json"},{"t":"p","c":"config.json 是文档站的配置文件，用于配置顶部的导航以及其他设置。navs 属性用于配置导航栏，其中 summary 属性对应下面提到的 SUMMARY.md 文件路径。你可以配置多个导航选项。"},0,{"t":"h","c":"SUMMARY.md"},{"t":"p","c":"SUMMARY.md 的格式是一个简单的链接列表，链接的名字是章节的名字，链接的指向是章节文件的路径，会在文档站的左侧展示。"},{"t":"p","c":"例如当前文档站的 SUMMARY.md 信息如下："},0,{"t":"p","c":"这些项目文件是构建文档站的关键部分，它们将帮助你组织和展示你的文档内容。请按照以上结构和格式编写你的文档。"}],"add-analysis":[{"t":"h","c":"添加分析代码"},{"t":"p","c":"如果您需要跟踪和统计您网站的访问数据，我们建议您使用 谷歌分析。"},{"t":"p","c":"要添加分析代码，请按照以下步骤操作："},{"t":"l","c":"1. 使用您的代码编辑器打开 _preview.html 文件。\n\n2. 在 <book-tool> 标签中添加一个带有 inject-head 属性的 <template> 标签，并将您的统计代码放置在模板内，类似如下所示："},0,{"t":"p","c":"一旦您添加了分析代码，请重新打包项目。分析代码会插入到所有页面的头部，以便您可以轻松跟踪和分析您网站的访问数据。"}],"normal-pages":[{"t":"h","c":"添加非文档页面"},{"t":"p","c":"有时候，您可能需要添加一些不是文档类型的页面，比如首页。在这种情况下，您可以通过编辑 config.json 文件的 pages 属性来指定非文档类型的 Markdown 文件的相对地址。"},0,{"t":"p","c":"在上述示例中，我们设置了一个首页（index.md），这意味着首页将只包含顶部导航组件，而不会显示文档类型页面的左侧文档导航和右侧文章导航。"},{"t":"p","c":"这种方式让您可以轻松地添加其他类型的页面，并根据需要进行自定义，而不受文档页面结构的限制。"}],"i18n":[{"t":"h","c":"多语言支持"},{"t":"p","c":"您可以通过修改 _preview.html 文件中的 book-tool 组件，在内部添加 source 标签来增加其他语言的文档。请注意，其他语言的文档必须要与原文内容一一对应。"},0,{"t":"p","c":"在上述代码中，我们使用了 source 标签来引入不同语言版本的文档配置文件。同时，lang 属性用于指定文档所使用的语言。目前支持的语言选项如下："},{"t":"l","c":"- 英语 (en)\n- 简体中文 (cn)\n- 繁体中文 (t-cn)\n- 西班牙语 (es)"},{"t":"p","c":"通过这种方式，您可以轻松为不同语言的用户提供相应语言版本的网站内容；"}],"add-footer":[{"t":"h","c":"添加底部内容"},{"t":"p","c":"您可以通过编辑 config.json 文件中的 footer 属性来定义所有页面底部显示的内容。在 footer 属性中，指定一个相对路径来引用包含底部内容的 Markdown 文件。"},0,{"t":"p","c":"与 SUMMARY.md 的内容类似，footer.md 文件包含了链接列表，每个链接都会在页面的底部显示。以下是一个示例 footer.md 文件的内容："},0,{"t":"p","c":"在 footer.md 文件中，您还可以添加图片，它们将显示为底部的图标。这样，您可以轻松为您的文档站添加自定义底部内容。"}],"index":[{"t":"h","c":"o-book 2"},{"t":"p","c":"o-book 2 是一个文档生成工具，它将会是你使用过的最简单的文档站生成工具之一。只需一个 HTML 文件，就可以将你编写的 Markdown 文章生成为功能完善的文档网站。它基于 ofa.js 开发，使用起来非常简单；"},{"t":"h","c":"使用前的准备"},{"t":"p","c":"在使用 o-book 之前，你需要掌握 Markdown 的基本语法。另外，你还需要准备一个文本编辑器。我们推荐使用微软推出的 VSCode，它不仅免费，而且有大量扩展可供选择，使你的文档编辑工作更加高效。"},{"t":"h","c":"准备文件"},{"t":"p","c":"在撰写文档之前，需要在本地准备好项目的基础文件。为了方便起见，我们已经为你提供了项目的初始文件，你只需点击以下链接下载并解压缩到本地即可："},{"t":"p","c":"下载项目文件"},{"t":"p","c":"后面我们会说明一下几个关键文件的含义；"},{"t":"h","c":"运行项目"},{"t":"p","c":"obook官方提供了三种方式运行你的项目，你可以根据需求选择其中一种方式启动即可："},{"t":"l","c":"1. 标准模式：使用本地服务器查看 o-book 组件，从而预览和生成文档站。\n2. 命令行模式：使用 Node.js 和命令行预览和生成文档站。\n3. 网页应用模式：通过网页直接选择本地 Markdown 文件夹进行预览和生成。"},{"t":"p","c":"标准模式 需要静态服务器打开下载好的文件；"},{"t":"p","c":"命令行模式 需要有一定前端开发知识基础，通过 npm 安装 o-book 模块，后面就可以通过命令行进行预览和打包项目；这个模式也可以成为脚本自动化的一部分；"},{"t":"p","c":"网页应用模式 不需要你有任何开发知识，只需要打开网站，选择本地文件夹，就能查看和打包你的项目；"}]}}