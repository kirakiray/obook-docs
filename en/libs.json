{"docs":{"index":[{"t":"h","c":"o-book 2"},{"t":"p","c":"o-book 2 is a documentation generation tool that will be one of the simplest document site generation tools you have ever used. With just one HTML file, you can generate a fully functional document website from the Markdown articles you have written. It is developed based on [ofa.js] (https://ofajs.com/) and is very easy to use."},{"t":"h","c":"Preparation before use"},{"t":"p","c":"Before using o-book, you need to master the basic syntax of Markdown. In addition, you also need to prepare a text editor. We recommend using VSCode launched by Microsoft. It is not only free, but also has a large number of extensions to choose from, making your document editing work more efficient."},{"t":"h","c":"Prepare Files"},{"t":"p","c":"Before writing the document, you need to prepare the basic files of the project locally. For convenience, we have provided you with the initial files of the project. Just click on the following link to download and unzip them to your local machine:\nDownload project file"},{"t":"p","c":"Later on, we will explain the meaning of a few key files;"},{"t":"h","c":"Run the project"},{"t":"p","c":"obook provides three ways to run your project. You can start it by choosing one of the following ways according to your needs:"},{"t":"l","c":"1. Standard Mode: Use a local server to view o-book components, allowing for previewing and generating documentation sites.\n2. Command Line Mode: Use Node.js and the command line to preview and generate documentation sites.\n3. Web Application Mode: Select a local Markdown folder directly through a web page for previewing and generating."},{"t":"p","c":"Standard mode requires a static server to open the downloaded file;"},{"t":"p","c":"Command-line mode requires a certain foundation of front-end development knowledge. Install the o-book module through npm, and then you can use the command line to preview and package projects. This mode can also be a part of script automation."},{"t":"p","c":"Web application mode does not require any development knowledge. Simply open the website, select a local folder, and you can view and package your project;"}],"run-mode":{"base-mode":[{"t":"h","c":"Standard Mode"},{"t":"p","c":"Standard mode is to use the local static server and open the prepared _preview.html file. If you are using our recommended VSCode editor, then this step is very simple:"},{"t":"l","c":"1. Open LiveServer extension page, click install, and it will automatically open VSCode and install the extension.\n\n2. Unzip the downloaded project and open the folder with VSCode.\n\n3. In VSCode, right-click on the _preview.html file in the root directory and select open with live server. After the page initialization is complete, you can click on the links on the page to preview."},{"t":"p","c":"_preview.html file is the launcher for previewing projects. You can also use other extensions that can start a static server instead of LiveServer."},{"t":"p","c":"This method of opening with VSCode has the lowest cost, and the editor can quickly start a static server. Of course, you can also use other Markdown editors, such as Typora, development tools such as Eclipse, or even the text editor that comes with your system, as long as you find it convenient."},{"t":"p","c":"As for static servers, you can use locally built servers, such as Nginx, Apache, etc., as long as they can be used to access static HTML files."},{"t":"h","c":"How to package"},{"t":"p","c":"Same as above, open _preview.html in server mode, click Download Website to get the packaged static files."},{"t":"p","c":"Next, you can directly access the base file section for more information."}],"cli-mode":[{"t":"h","c":"Command Line Mode"},{"t":"p","c":"Command line mode is used to start your project by using the obook command, and it requires a certain knowledge base of development. The following is the usage process:"},{"t":"l","c":"1. Make sure the system has Node.js installed and ensure that the version is greater than or equal to 18.\n\n2. Install o-book on your local machine by using the command npm i obook -g in the command line.\n\n3. After downloading the project files, make sure the package.json file in the root directory of the project is configured with the obook property as shown below:\n"},0,{"t":"l","c":"4. In the terminal, navigate to the current project directory, and use the obook dev command to preview in real-time."},{"t":"h","c":"How to package"},{"t":"p","c":"In the same mode, use the obook build command to package the project to the dist directory defined in package.json."},{"t":"p","c":"Next, you can directly access the base file section for more information."}],"webapp-mode":[{"t":"h","c":"Web Application Mode"},{"t":"p","c":"This is the least cost way to use obook, the following are the steps to use it:"},{"t":"l","c":"1. Use the latest version of the Chrome browser (or any other browser that supports the File Access API) to open the obook webapp.\n\n2. Click on the \"Select Local Folder\" button on the webpage to open your local project folder."},{"t":"p","c":"Now, you can click on the link for a preview."},{"t":"h","c":"How to package"},{"t":"p","c":"The steps are the same as above. Click the \"Download Website\" button on the page to download the packaged document site."},{"t":"p","c":"This method is very convenient, suitable for users who do not need complex settings or development knowledge."}]},"base-files":[{"t":"h","c":"Basic Files"},{"t":"p","c":"The base files are equivalent to the scaffolding for o-book startup. They serve as the foundation for previewing and packaging your project. They are indirectly related to your Markdown website, and the packaged files will not include these base files. If you are not a developer or do not care about the details of the scaffolding, you can skip this chapter and go directly to Project Files."},{"t":"p","c":"The most important basic files of o-book are sw.js and _preview.html."},{"t":"h","c":"sw.js"},{"t":"p","c":"sw.js is one of the basic files with only one line of code, which is used to initialize the official file. It does not require much attention."},0,{"t":"h","c":"_preview.html"},{"t":"p","c":"_preview.html is the file that initializes the project preview. The main code is as follows:"},0,{"t":"p","c":"Among them, source refers to the location of the project configuration file, and project files will be discussed in the next chapter. lang attribute is used to set the default language used by the document station. obook supports multiple languages by default. If multiple language support is not needed, only one source needs to be kept."},{"t":"p","c":"Currently, the official o-book supports languages including:"},{"t":"l","c":"- en English\n- cn Simplified Chinese\n- t-cn Traditional Chinese\n- es Spanish"}],"project-docs":[{"t":"h","c":"Project Files"},{"t":"p","c":"The project files are the files where you actually write documents. The project directory structure is roughly as follows:"},{"t":"l","c":"- config.json\n- docs\n  - SUMMARY.md\n  - article1.md\n  - article2.md"},{"t":"p","c":"In this structure, the .md file is the file where you actually write the content of the document, and you just need to write the document in Markdown format."},{"t":"h","c":"config.json"},{"t":"p","c":"config.json is the configuration file for the document site, used to configure the top navigation and other settings. The navs attribute is used to configure the navigation bar, and the summary attribute corresponds to the SUMMARY.md file path mentioned below. You can configure multiple navigation options."},0,{"t":"h","c":"SUMMARY.md"},{"t":"p","c":"The format of SUMMARY.md is a simple list of links. The name of the link is the name of the chapter, and the target of the link is the path of the chapter file, which will be displayed on the left side of the documentation site."},{"t":"p","c":"For example, the information of the SUMMARY.md file of the current document site is as follows:"},0,{"t":"p","c":"These project files are crucial to building a documentation site, as they will help you organize and showcase your document content. Please write your document following the above structure and format."}],"add-analysis":[{"t":"h","c":"Add analysis code"},{"t":"p","c":"If you need to track and analyze the visit data of your website, we recommend you to use Google Analytics."},{"t":"p","c":"To add the analysis code, please follow these steps:"},{"t":"l","c":"1. Open the _preview.html file with your code editor.\n2. Add a <template> tag with the inject-head attribute within the <book-tool> tag, and place your tracking code inside the template, as shown below:"},0,{"t":"p","c":"Once you have added the analytics code, please repack the project. The analytics code will be inserted into the header of all pages so that you can easily track and analyze the visitor data of your website."}],"i18n":[{"t":"h","c":"Multilingual Support"},{"t":"p","c":"You can add documents in other languages by modifying the book-tool component in the _preview.html file and adding source tags inside it. Please note that the documents in other languages must correspond one-to-one with the original content."},0,{"t":"p","c":"In the above code, we used the source tag to import document configuration files for different language versions. At the same time, the lang attribute is used to specify the language used in the document. The currently supported language options are as follows:"},{"t":"l","c":"- English (en)\n- Simplified Chinese (cn)\n- Traditional Chinese (t-cn)\n- Spanish (es)\nBy doing so, you can easily provide website content in the respective language version to users of different languages."}],"normal-pages":[{"t":"h","c":"Add non-document pages"},{"t":"p","c":"Sometimes, you may need to add some pages that are not document types, such as a homepage. In this case, you can specify the relative address of the non-document type Markdown file by editing the pages attribute of the config.json file."},0,{"t":"p","c":"In the above example, we have set up a homepage (index.md), which means that the homepage will only include the top navigation component and will not display the left document navigation and right article navigation of the document type pages."},{"t":"p","c":"This allows you to easily add other types of pages and customize as needed, without being limited by the structure of the document page."}],"add-footer":[{"t":"h","c":"Add Footer content"},{"t":"p","c":"You can define the content displayed at the bottom of all pages by editing the footer property in the config.json file. In the footer property, specify a relative path to reference the Markdown file that contains the footer content."},0,{"t":"p","c":"Similar to the content of SUMMARY.md, the footer.md file contains a list of links that will be displayed at the bottom of the page. Below is an example of the content of the footer.md file:"},0,{"t":"p","c":"In the footer.md file, you can also add images, which will be displayed as icons at the bottom. This way, you can easily add custom footer content to your documentation site."}]}}