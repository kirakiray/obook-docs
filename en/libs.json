{"docs":{"run-mode":{"base-mode":[{"t":"h","c":"Standard Mode"},{"t":"p","c":"The standard mode is to use a local static server and open the prepared _preview.html file. If you are using our recommended VSCode editor, this step is very simple:"},{"t":"l","c":"1. Open the LiveServer extension page, click install, and then VSCode will automatically open and install the extension.\n\n2. Unzip the downloaded project and open the folder with VSCode.\n\n3. In VSCode, right-click on the _preview.html file in the root directory and select open with live server. After the page is initialized, you can click on the links on the page to preview."},{"t":"p","c":"_preview.html file is the launcher for previewing the project. You can also use other extensions that can start a static server instead of LiveServer."},{"t":"p","c":"This is the easy way to open using VSCode, where you can quickly launch a static server within the editor. Of course, you can also use other Markdown editors, such as Typora, development tools like Eclipse, or even your system's built-in text editor, as long as you find it convenient."},{"t":"p","c":"As for the static server, you can use locally built servers such as Nginx, Apache, etc., as long as they can be used to access static HTML files."},{"t":"h","c":"How to package"},{"t":"p","c":"Same as above, open _preview.html under server mode, click Download Website to get the packaged static files."},{"t":"p","c":"Next, you can directly go to the base files section for more information."}],"cli-mode":[{"t":"h","c":"Command Line Mode"},{"t":"p","c":"Command-line mode is used to start your project by using the obook command, and it requires a certain level of development knowledge. The following is the usage process:"},{"t":"l","c":"1. Ensure that the system has Node.js installed and that the version is greater than or equal to 18.\n\n2. Install o-book on your local machine by using the command npm i obook -g in the command line.\n\n3. After downloading the project files, make sure that the package.json file in the root directory of the project is configured with the obook property as shown below:"},0,{"t":"l","c":"4. Switch to the current project directory in the terminal and use the obook dev command for real-time preview."},{"t":"h","c":"How to package"},{"t":"p","c":"In the same mode, use the obook build command to package the project to the dist directory defined in package.json."},{"t":"p","c":"Next, you can directly go to the base files section for more information."}],"webapp-mode":[{"t":"h","c":"Web Application Patterns"},{"t":"p","c":"This method is the lowest cost way to use obook, and the following are the steps to use it:"},{"t":"l","c":"1. Use the latest version of the Chrome browser (or other browsers that support File Access API) and open obook webapp\n\n2. Click on the \"Choose Local Folder\" button on the webpage to open your local project folder;"},{"t":"p","c":"Now, you can click on the link to preview,"},{"t":"h","c":"How to package"},{"t":"p","c":"The steps are the same as above. Click the \"Download Website\" button on the page to download the packaged document site."},{"t":"p","c":"This method is very convenient and suitable for users who do not require complex settings and development knowledge."}]},"base-files":[{"t":"h","c":"Basic Files"},{"t":"p","c":"The basic files are equivalent to the scaffold for o-book, which is necessary to preview and build the project. They are indirectly related to your Markdown website, and the packaged files will not include these basic files. If you are not a developer or do not care about the details of the scaffold, you can skip this chapter and go directly to project files."},{"t":"p","c":"o-book has two main foundational files: sw.js and _preview.html."},{"t":"h","c":"sw.js"},0,{"t":"h","c":"_preview.html"},{"t":"p","c":"_preview.html is the file that initializes the project preview. The main code is as follows:"},0,{"t":"p","c":"In the above content, the source refers to the location of the project configuration file, and the project file will be discussed in the next chapter. The lang attribute is used to set the default language used by the document site. By default, obook supports multiple languages. If you do not need multi-language support, you can keep only one source."},{"t":"p","c":"Currently, the official language packages supported by o-book include:"},{"t":"l","c":"- en English\n- cn Simplified Chinese\n- t-cn Traditional Chinese\n- es Spanish"}],"project-docs":[{"t":"h","c":"Project Files"},{"t":"p","c":"The project files are the files where you actually write your documents. The project directory structure is roughly as follows:"},{"t":"l","c":"- config.json\n- docs\n  - SUMMARY.md\n  - article1.md\n  - article2.md"},{"t":"p","c":"In this structure, .md files are the files where you actually write the content of your document, and you just need to write the document in Markdown format."},{"t":"h","c":"config.json"},{"t":"p","c":"config.json is the configuration file for the document site, which is used to configure the top navigation and other settings. The navs property is used to configure the navigation bar, where the summary property corresponds to the SUMMARY.md file path mentioned below. You can configure multiple navigation options."},0,{"t":"h","c":"SUMMARY.md"},{"t":"p","c":"The format of SUMMARY.md is a simple list of links. The name of the links is the name of the chapter, and the target of the links is the path to the chapter file, which will be displayed on the left side of the document site."},{"t":"p","c":"For example, the information in the current document site's SUMMARY.md is as follows:"},0,{"t":"p","c":"These project files are a crucial part of building a documentation site. They will help you organize and showcase your documentation content. Please follow the above structure and format to write your documentation."}],"add-analysis":[{"t":"h","c":"Add analysis code"},{"t":"p","c":"If you need to track and analyze the visitor data of your website, we recommend using Google Analytics."},{"t":"p","c":"To add analytics code, please follow these steps:"},{"t":"l","c":"1. Open the _preview.html file with your code editor.\n\n2. Add a <template> tag with the inject-head attribute inside the <book-tool> tag, and place your tracking code within the template, similar to the following example:"},0,{"t":"p","c":"Once you have added the analytical code, please repackage the project. The analytical code will be inserted into the header of all pages, allowing you to easily track and analyze the traffic data of your website."}],"index":[{"t":"h","c":"o-book 2"},{"t":"p","c":"o-book 2 is a documentation generation tool that will be one of the easiest documentation site generators you have ever used. With just one HTML file, you can turn your Markdown articles into fully functional document websites. It is developed based on ofa.js and is very easy to use;"},{"t":"h","c":"Preparation before use"},{"t":"p","c":"Before using o-book, you need to master the basic syntax of Markdown. In addition, you need to have a text editor ready. We recommend using VSCode developed by Microsoft, which is not only free but also has a wide range of extensions to choose from, making your document editing work more efficient."},{"t":"h","c":"Prepare Files"},{"t":"p","c":"Before writing the document, you need to prepare the basic files of the project locally. For your convenience, we have provided the initial files of the project for you. Just click on the following link to download and unzip them to your local machine:"},{"t":"p","c":"Download project files"},{"t":"p","c":"Later, we will explain the meanings of several key files;"},{"t":"h","c":"Running the Project"},{"t":"p","c":"The official obook provides three ways to run your project. You can choose one of them according to your needs and start it:"},{"t":"l","c":"1. Standard Mode: Use a local server to view the o-book component and preview and generate the documentation site.\n2. Command-line mode: Use Node.js and the command line to preview and generate the documentation site.\n3. Web application mode: Preview and generate by directly selecting a local Markdown folder through a web page."},{"t":"p","c":"Standard Mode requires a static web server to open the downloaded files."},{"t":"p","c":"Command Line Mode requires a certain foundation of frontend development knowledge. After installing the o-book module through npm, you can use the command line to preview and build projects. This mode can also be integrated into script automation."},{"t":"p","c":"Web Application Mode does not require any development knowledge. You just need to open the website and select a local folder to view and package your project."}],"add-footer":[{"t":"h","c":"Add bottom content"},{"t":"p","c":"You can define the content displayed at the bottom of all pages by editing the footer property in the config.json file. In the footer property, specify a relative path to reference the Markdown file that contains the footer content."},0,{"t":"p","c":"Similar to the content in SUMMARY.md, the footer.md file includes a list of links that will be displayed at the bottom of the page. Here is an example of the content in the footer.md file:"},0,{"t":"p","c":"If your document supports multiple languages, the bottom content will also include entry links for the different language versions for user selection."},{"t":"p","c":"In the footer.md file, you can also add images that will be displayed as icons at the bottom. This way, you can easily add custom footer content to your documentation site."}],"normal-pages":[{"t":"h","c":"Add Non-Document Pages"},{"t":"p","c":"Sometimes, you may need to add pages that are not of the documentation type, such as a homepage. In this case, you can specify the relative address of the non-documentation Markdown file by editing the pages property in the config.json file."},0,{"t":"p","c":"In the above example, we set up a home page (index.md), which means the home page will only contain the top navigation component, and will not display the left document navigation and right article navigation for document type pages."},{"t":"p","c":"This approach allows you to easily add other types of pages and customize them as needed, without being constrained by the structure of the document page."}],"use-component":[{"t":"h","c":"Using Components"},{"t":"p","c":"Since obook is based on ofa.js development, the obook documentation supports the use of components developed with ofa.js. You can use the l-m component to reference these custom components and wrap them as if using HTML tags. Here is an example using the simp-block component:"},0,{"t":"h","c":"Developing Your Own Component"},{"t":"p","c":"You can click on Making Components to learn how to develop custom components that meet your needs. Once you have developed your own component, place it in the publics directory under the root directory of the document station, and use relative paths to reference this component for use in the document. An example is shown below:"},0,0,{"t":"p","c":"Please note that the Markdown content inside custom components will be translated into HTML elements. For example, regular line breaks will be converted into p elements, and ## will be translated into h2 elements, etc. Inside custom components, you can initialize and process elements by accessing the elements inside the slot."}],"set-description":[{"t":"h","c":"Set Page Description"},{"t":"p","c":"In order to optimize search engine rankings, it is necessary to set the description text for web pages. You can set the description attribute for the generated pages by adding the desc comment in Markdown files, as shown below:"},0,{"t":"p","c":"Once the above comments are added, the generated page will be included in the header of the target HTML file, as shown below: "},0,{"t":"p","c":"Through this method, you can provide relevant descriptions about the content of your page, which helps search engines understand the content of the page and improve search engine optimization effectiveness."}],"i18n":[{"t":"h","c":"Multilanguage support"},{"t":"p","c":"You can add documentation in other languages by modifying the book-tool component inside the _preview.html file and adding a source tag. Please note that the documentation in other languages must correspond one-to-one with the original content."},0,{"t":"p","c":"In the above code, we used the source tag to import documentation configuration files for different language versions. At the same time, the lang attribute is used to specify the language used in the document. The currently supported language options are as follows:"},{"t":"l","c":"- English (en)\n- Simplified Chinese (cn)\n- Traditional Chinese (t-cn)\n- Spanish (es)"},{"t":"p","c":"By doing this, you can easily provide website content in the corresponding language version for users of different languages."}]}}